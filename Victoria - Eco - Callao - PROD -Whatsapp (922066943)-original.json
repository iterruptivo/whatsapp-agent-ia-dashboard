{
  "name": "Victoria - Eco - Callao - PROD -Whatsapp (922066943)",
  "nodes": [
    {
      "parameters": {
        "path": "whatsapp-eco-callao",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -4144,
        -176
      ],
      "id": "4a0afd32-25e3-472e-8555-1226db1f0a7c",
      "name": "Webhook: Recibir WhatsApp",
      "webhookId": "84107769-58f9-467e-8d6e-da0c506b2293"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.query[\"hub.challenge\"] }}",
        "options": {
          "responseCode": 200
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -3472,
        -368
      ],
      "id": "a2427bba-8072-4808-8a27-2287d3dcb9df",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.body.entry[0].changes[0].value.messages[0].type }}",
                    "rightValue": "text",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "dbcc75b1-9deb-49c4-8f55-34b8d3c23455"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "text"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "0d57ef7c-87b7-44a5-9374-4082c3398cac",
                    "leftValue": "={{ $json.body[\"hub.mode\"] }}",
                    "rightValue": "subscribe",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "verification"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "d9c90a3f-fc16-4e84-bebb-2c87048cd4f1",
                    "leftValue": "={{ $json.body.entry[0].changes[0].value.messages[0].type }}",
                    "rightValue": "audio",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "audio"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.3,
      "position": [
        -3728,
        -192
      ],
      "id": "603ba596-50e1-41ee-8654-9c20913b22b3",
      "name": "Switch"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=--- DOCUMENTO (fuente de verdad, no inventes nada) ---\n{{ $json.knowledgeBase || '' }}\n--- FIN ---\n\nINFORMACIÓN DEL USUARIO:\n{{ $json.nombre_actual ? \"Nombre: \" + $json.nombre_actual : \"Aún no ha proporcionado su nombre\" }}\n\nHISTORIAL DE CONVERSACIÓN:\n{{ $json.historial || '' }}\n\nINSTRUCCIÓN IMPORTANTE: Si ya conoces el nombre del usuario, NO vuelvas a pedirlo. NO te presentes de nuevo si ya iniciaste la conversación antes. Continúa naturalmente la conversación.",
              "role": "system"
            },
            {
              "content": "={{ $json.userMessage || '' }}"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -1632,
        -320
      ],
      "id": "f386f786-87c6-449c-a87b-e90481e06499",
      "name": "Message a model",
      "credentials": {
        "openAiApi": {
          "id": "WhavwmgjOQKegim4",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "send",
        "phoneNumberId": "771452262728711",
        "recipientPhoneNumber": "={{ $node[\"Webhook: Recibir WhatsApp\"].json.body.entry[0].changes[0].value.contacts[0].wa_id }}\n",
        "textBody": "={{ $node[\"Code2\"].json.mensaje_bot_final }}",
        "additionalFields": {
          "previewUrl": false
        }
      },
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1,
      "position": [
        160,
        288
      ],
      "id": "fc589c51-12b0-499d-a90c-c7509d8f3d56",
      "name": "Send message",
      "webhookId": "96927320-ec57-4601-b2ed-daabf5d4a3d1",
      "credentials": {
        "whatsAppApi": {
          "id": "hmJdrkvSmxXNS5rM",
          "name": "WhatsApp account (Business - EcoPlaza Trapiche cel 922066943)"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "c1313a0d-5d8f-497f-a0d5-7dc9aeadf3e2",
              "leftValue": "=={{ $json.query['hub.mode'] }}",
              "rightValue": "subscribe",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3936,
        -352
      ],
      "id": "b2df6b0f-11e2-4a21-b4fe-08b128d8c9d9",
      "name": "If"
    },
    {
      "parameters": {
        "jsCode": "// Entradas\n  const botResponse = $node[\"Message a model\"].json?.message?.content || \"\";\n  const telefono = $node[\"Code1\"].json.telefono || \"\";\n  const historialPrevio = $node[\"Code1\"].json.historial || \"\";\n  const userMessage = $node[\"Code1\"].json.userMessage || \"\";\n\n  const nombrePrevio = $node[\"Code1\"].json.nombre_actual || \"\";\n  const rubroPrevio = $node[\"Code1\"].json.rubro_previo || \"\";\n  const horarioPrevio = $node[\"Code1\"].json.horario_previo || \"\";\n\n  // Datos extraídos por GPT\n  const extractedRaw = $node[\"OpenAI - Extract Data\"].json?.message?.content;\n  let extracted = { nombre: \"\", rubro: \"\", horario_visita: \"\", horario_visita_fecha: \"\", horario_visita_hora: \"\"\n  };\n  try {\n    if (typeof extractedRaw === \"string\") extracted = JSON.parse(extractedRaw);\n    else if (typeof extractedRaw === \"object\" && extractedRaw) extracted = extractedRaw;\n  } catch (e) { /* default */ }\n\n  const nombre = (extracted.nombre || \"\").trim() || nombrePrevio;\n  const rubro = (extracted.rubro || \"\").trim() || rubroPrevio;\n  const horario = (extracted.horario_visita || \"\").trim() || horarioPrevio;\n\n  // ═══════════════════════════════════════════════════════════\n  // TIMESTAMP PRESERVATION LOGIC\n  // ═══════════════════════════════════════════════════════════\n\n  // Leer nuevo timestamp del parser\n  const nuevoTimestamp = $node[\"Parse Horario to Timestamp\"].json?.horario_visita_timestamp || null;\n\n  // Leer timestamp anterior de la BD (vía Code1)\n  const timestampPrevio = $node[\"Code1\"].json.timestamp_previo || null;\n\n  // PRESERVAR: Si nuevo es null, mantener el anterior\n  // Si nuevo NO es null, usar el nuevo (permite actualizar si usuario cambia horario)\n  const horario_visita_timestamp = nuevoTimestamp !== null ? nuevoTimestamp : timestampPrevio;\n\n  // ═══════════════════════════════════════════════════════════\n  // NOTIFICACION_ENVIADA PRESERVATION LOGIC\n  // ═══════════════════════════════════════════════════════════\n\n  // Leer estado de notificacion desde Code1 (desde BD)\n  const notificacionEnviada = $node[\"Code1\"].json.notificacion_previamente_enviada || false;\n\n  // ═══════════════════════════════════════════════════════════\n\n  // Contar intentos\n  const noaMessages = (historialPrevio.match(/\\nAgenteIA:/g) || []).length;\n\n  let estado = \"en_conversacion\";\n  let debeForazarCierre = false;\n\n  // ---- LÓGICA INTELIGENTE DE ESTADOS ----\n\n  // 1. Si tiene TODOS los datos → Lead completo (puede seguir preguntando)\n  if (nombre && rubro && horario) {\n    estado = \"lead_completo\";\n    debeForazarCierre = false;  // NUNCA forzar cierre si tiene datos completos\n  }\n  // 2. Si tiene ALGUNOS datos (parcial)\n  else if (nombre || rubro || horario) {\n    // Dar más oportunidades (15 intentos) porque muestra interés\n    if (noaMessages >= 15) {\n      estado = \"lead_incompleto\";\n      debeForazarCierre = true;\n    } else {\n      estado = \"en_conversacion\";\n      debeForazarCierre = false;\n    }\n  }\n  // 3. Si NO tiene NINGÚN dato\n  else {\n    // Cerrar antes (10 intentos) porque no muestra interés real\n    if (noaMessages >= 10) {\n      estado = \"conversacion_abandonada\";\n      debeForazarCierre = true;\n    } else {\n      estado = \"en_conversacion\";\n      debeForazarCierre = false;\n    }\n  }\n\n  // ---- MENSAJE FINAL ----\n  let mensajeBot = botResponse;\n\n  // Solo forzar cierre si corresponde\n  if (debeForazarCierre) {\n    mensajeBot = \"Su caso es importante para nosotros, pronto un asesor especializado se comunicará con usted para atender sus consultas de forma detallada, manténgase al pendiente por favor. 🤗\";\n  }\n\n  // Construir historial completo (NO duplicar mensaje de usuario, ya está en historialPrevio)\n  const historial_conversacion =\n    (historialPrevio ? historialPrevio + \"\\n\" : \"\") +\n    \"AgenteIA: \" + mensajeBot;\n\n  // Últimos 10 mensajes\n  const lines = historial_conversacion.split(/\\r?\\n/).filter(Boolean);\n  const historial_reciente = lines.slice(-10).join(\"\\n\");\n\n  return [{\n    json: {\n      telefono: telefono,\n      nombre: nombre,\n      rubro: rubro,\n      horario_visita: horario,\n      horario_visita_timestamp: horario_visita_timestamp,\n      historial_conversacion,\n      historial_reciente,\n      fecha_captura: new Date().toISOString(),\n      ultimo_mensaje: userMessage,\n      estado: estado,\n      intentos_bot: noaMessages + 1,\n      mensaje_bot_final: mensajeBot,\n      notificacion_enviada: notificacionEnviada,\n      estado_al_notificar: null\n    }\n  }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2224,
        160
      ],
      "id": "da2ca3c4-9c80-4336-a0e9-e797ca0108b8",
      "name": "Code2"
    },
    {
      "parameters": {
        "jsCode": "// --- Fuentes posibles ---\n  const fromTranscription = $json.userMessage;\n  const fromWebhook = $node[\"Webhook: Recibir WhatsApp\"].json?.body?.entry?.[0]?.changes?.[0]?.value?.messages?.[0]?.text?.body;\n\n  // Mensaje final del usuario (nunca null)\n  const userMessage = (fromTranscription ?? fromWebhook ?? \"\").toString().trim();\n\n  // Teléfono\n  const telefono =\n    $json.telefono ??\n    $node[\"Webhook: Recibir WhatsApp\"].json?.body?.entry?.[0]?.changes?.[0]?.value?.messages?.[0]?.from ??\n    \"\";\n\n  // Base de conocimiento\n  const knowledgeBase =\n    $node[\"HTTP Request (GitHub)\"].json?.data ??\n    $node[\"HTTP Request (GitHub)\"].json ??\n    $json.knowledgeBase ?? \"\";\n\n  // SUPABASE: Manejar respuesta (array o undefined)\n  let leadData = {};\n\n  try {\n    const supabaseResponse = $node[\"Supabase - Get Lead\"].json;\n\n    // Supabase siempre devuelve array\n    if (Array.isArray(supabaseResponse) && supabaseResponse.length > 0) {\n      leadData = supabaseResponse[0];\n    } else if (supabaseResponse && !Array.isArray(supabaseResponse)) {\n      // Por si acaso viene como objeto\n      leadData = supabaseResponse;\n    }\n  } catch (e) {\n    // Si falla, leadData queda como objeto vacío\n    leadData = {};\n  }\n\n  // Datos previos del lead (para preservar información ya capturada)\n  const nombrePrevio = leadData.nombre || \"\";\n  const rubroPrevio = leadData.rubro || \"\";\n  const horarioPrevio = leadData.horario_visita || \"\";\n  const timestampPrevio = leadData.horario_visita_timestamp || null;\n  const notificacionPreviamenteEnviada = leadData.notificacion_enviada || false;\n\n  // Historial previo\n  const historialPrevio = leadData.historial_conversacion || \"\";\n\n  // Construir historial completo: historialPrevio + mensaje actual del usuario\n  const historialCompleto =\n    (historialPrevio ? historialPrevio + \"\\n\" : \"\") +\n    \"Usuario: \" + userMessage;\n\n  return [{\n    json: {\n      telefono: telefono,\n      userMessage: userMessage,\n      historial: historialCompleto,\n      knowledgeBase: knowledgeBase,\n      nombre_actual: nombrePrevio,\n      rubro_previo: rubroPrevio,\n      horario_previo: horarioPrevio,\n      timestamp_previo: timestampPrevio,\n      notificacion_previamente_enviada: notificacionPreviamenteEnviada,\n    }\n  }]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1952,
        -192
      ],
      "id": "2811b959-1a30-4806-bfbc-fd938288347d",
      "name": "Code1"
    },
    {
      "parameters": {
        "jsCode": "// --- Lee el mensaje entrante ---\nconst webhookData = $node[\"Webhook: Recibir WhatsApp\"].json;\nconst messageData = webhookData.body.entry[0].changes[0].value.messages[0];\n\n// --- Datos que necesitamos ---\nconst telefono = messageData.from;\nconst mediaId = messageData.audio.id;\n\n// --- Devuelve los campos al flujo ---\nreturn [{\n  json: {\n    telefono,\n    mediaId,\n    isAudio: true\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3904,
        160
      ],
      "id": "8b465ee4-e4f8-4215-9405-88b4d75921ad",
      "name": "Code - Extract Audio Info"
    },
    {
      "parameters": {
        "url": "=https://graph.facebook.com/v21.0/{{ $json.mediaId }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpCustomAuth",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3632,
        160
      ],
      "id": "9e01d379-282d-4849-982c-98d1b0871972",
      "name": "HTTP Request - Get Audio URL",
      "credentials": {
        "httpCustomAuth": {
          "id": "P5pI2f13ZFQRYvYM",
          "name": "WhatsApp Graph API (EcoPlaza Victoria Callao - Eco Plaza Business)"
        }
      }
    },
    {
      "parameters": {
        "url": "={{$json.url}}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpCustomAuth",
        "options": {
          "redirect": {
            "redirect": {
              "followRedirects": false
            }
          },
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "file"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3344,
        160
      ],
      "id": "4d62f99b-92ab-450a-baf8-44c2a363cb44",
      "name": "HTTP Request - Download Audio",
      "credentials": {
        "httpCustomAuth": {
          "id": "P5pI2f13ZFQRYvYM",
          "name": "WhatsApp Graph API (EcoPlaza Victoria Callao - Eco Plaza Business)"
        }
      }
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {
          "language": "es"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -3072,
        160
      ],
      "id": "67073fa3-ee30-4987-84fd-05f425e49e50",
      "name": "OpenAI - Whisper Transcribe",
      "credentials": {
        "openAiApi": {
          "id": "WhavwmgjOQKegim4",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Obtener el teléfono del primer nodo de audio\nconst telefono = $node[\"Code - Extract Audio Info\"].json.telefono;\n\n// Obtener la transcripción de Whisper\nconst transcripcion = $json.text || '';\n\nreturn [{\n  json: {\n    telefono: telefono,\n    userMessage: transcripcion,\n    isAudio: true,\n    body: {\n      entry: [{\n        changes: [{\n          value: {\n            messages: [{\n              from: telefono,\n              text: {\n                body: transcripcion\n              }\n            }]\n          }\n        }]\n      }]\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2848,
        160
      ],
      "id": "35ac5e3e-fc9a-4c4b-8b8e-b6dd7050e86a",
      "name": "Code - Format Transcription"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "clashHandling": {
            "values": {
              "resolveClash": "preferLast"
            }
          },
          "includeUnpaired": true
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -2208,
        -192
      ],
      "id": "0dbf220b-b7fc-4acb-8e6a-f60ba971e6e1",
      "name": "Merge"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Eres un extractor de datos experto. Analiza la conversación y extrae SOLO la información solicitada.\n\n  DATOS A EXTRAER:\n  1. nombre: El nombre completo de la persona (solo si lo menciona explícitamente)\n  2. rubro: El tipo de negocio, producto o actividad comercial (ej: ferretería, bazar, pescado, ropa, textil, frutas, verduras, pollos, carnes, celulares, televisiones, etc.)\n  3. horario_visita: Texto original que mencionó sobre horario de visita\n  4. horario_visita_fecha: Fecha calculada en formato DD/MM/YYYY\n  5. horario_visita_hora: Hora en formato H:MMam/pm (ejemplo: 3:00pm, 10:00am)\n\n  ═══════════════════════════════════════════════════════\n  CONTEXTO TEMPORAL (para cálculo de fechas):\n  ═══════════════════════════════════════════════════════\n  - Fecha de HOY: {{$now.format('D')}}\n  - Día de la semana HOY: {{$now.format('DDDD')}}\n  - Formato de fecha esperado: DD/MM/YYYY (día/mes/año)\n  - Timezone: America/Lima (UTC-5)\n  - Idioma: Español (Perú)\n\n  ═══════════════════════════════════════════════════════\n  INSTRUCCIONES PARA CALCULAR FECHAS:\n  ═══════════════════════════════════════════════════════\n\n  Tú eres GPT-4o-mini y eres capaz de razonar sobre fechas. Usa el contexto de \"hoy\" para calcular correctamente:\n\n  FECHAS RELATIVAS:\n  - \"hoy\" → Calcula fecha de hoy\n  - \"mañana\" → Suma 1 día a hoy\n  - \"pasado mañana\" → Suma 2 días a hoy\n  - \"dentro de X días\" → Suma X días a hoy\n\n  DÍAS DE LA SEMANA:\n  - \"el lunes\", \"próximo lunes\", \"el lunes que viene\" → Próximo lunes DESPUÉS de hoy\n  - \"martes de la próxima semana\" → Martes de la semana siguiente a la actual\n  - \"jueves de esta semana\" → Si hoy es antes del jueves, el jueves de esta semana; si ya pasó, el próximo jueves\n  - IMPORTANTE: Si hoy es martes y dice \"el martes\", asume que se refiere al próximo martes (no hoy)\n\n  FECHAS EXPLÍCITAS:\n  - \"el 20 de octubre\" → 20/10/2025\n  - \"15 de noviembre\" → 15/11/2025\n\n  CALCULA CORRECTAMENTE:\n  - Hoy es {{$now.format('DDDD')}}\n  - Usa lógica matemática para sumar días y calcular el día de la semana correcto\n  - Retorna SIEMPRE en formato DD/MM/YYYY\n\n  ═══════════════════════════════════════════════════════\n  INSTRUCCIONES PARA PARSEAR HORAS:\n  ═══════════════════════════════════════════════════════\n\n  FORMATO ESPERADO: H:MMam/pm (ejemplos: 3:00pm, 10:00am, 8:30am)\n\n  CONVERSIONES COMUNES:\n  - \"4 de la tarde\" → 4:00pm\n  - \"10 de la mañana\" → 10:00am\n  - \"3 y media de la tarde\" → 3:30pm\n  - \"mediodía\" → 12:00pm\n  - \"8 de la mañana\" → 8:00am\n\n  CASOS ESPECIALES:\n  - Si dice \"por la mañana\" SIN hora específica → Dejar VACÍO y no tomarlo en cuenta (Victoria preguntará)\n  - Si dice \"por la tarde\" SIN hora específica → Dejar VACÍO y no tomarlo en cuenta (Victoria preguntará)\n  - Si solo menciona fecha sin hora → Dejar horario_visita_hora VACÍO\n  - Si dice \"este fin de semana\" Sin hora y día específico → Dejar VACÍO y no tomarlo en cuenta (Victoria preguntará)\n\n  REGLA CRÍTICA DE VALIDACIÓN:\n  ═══════════════════════════════════════════════════════════\n  ANTES de retornar el JSON, valida:\n\n  1. Si horario_visita_fecha está VACÍO → horario_visita DEBE estar VACÍO también\n  2. Si horario_visita_hora está VACÍO → horario_visita DEBE estar VACÍO también\n  3. \"este fin de semana\", \"por la tarde\", \"por la mañana\", \"cualquier día\" → TODOS los campos VACÍOS\n\n  Ejemplos de lo que NO debes capturar:\n  - \"este fin de semana\" → Todo VACÍO\n  - \"por la tarde\" → Todo VACÍO\n  - \"cuando pueda\" → Todo VACÍO\n  - \"cualquier día\" → Todo VACÍO\n\n  SOLO captura horario_visita si tienes DÍA ESPECÍFICO (ej: lunes, martes, 15 de octubre)\n\n  ═══════════════════════════════════════════════════════\n  REGLAS CRÍTICAS:\n  ═══════════════════════════════════════════════════════\n\n  1. Si NO menciona horario de visita → Todos los campos de horario VACÍOS\n  2. Si menciona día pero NO hora específica → horario_visita y horario_visita_fecha llenos, horario_visita_hora VACÍO\n  3. Si menciona día Y hora específica → Todos los campos llenos\n  4. NO inventes información que no está en el mensaje\n  5. NO repitas datos de mensajes anteriores si no se mencionan en el actual\n  6. Si solo saluda → Todos los campos VACÍOS\n  7. SIEMPRE calcula fechas basándote en HOY ({{$now.format('DDDD')}})\n  8. Confía en tu capacidad de razonamiento temporal (eres GPT-4o-mini)\n  9. Si no tienes claro el día y hora de visita → Todos los campos de horario VACÍOS (Victoria pregutnará)\n\n  ═══════════════════════════════════════════════════════\n  EJEMPLOS (HOY es {{$now.format('DDDD')}}):\n  ═══════════════════════════════════════════════════════\n\n  Ejemplo 1:\n  Usuario: \"el próximo jueves a las 4 de la tarde\"\n  Respuesta:\n  {\n    \"nombre\": \"\",\n    \"rubro\": \"\",\n    \"horario_visita\": \"el próximo jueves a las 4 de la tarde\",\n    \"horario_visita_fecha\": \"16/10/2025\",\n    \"horario_visita_hora\": \"4:00pm\"\n  }\n\n  Ejemplo 2:\n  Usuario: \"martes de la próxima semana\"\n  Respuesta:\n  {\n    \"nombre\": \"\",\n    \"rubro\": \"\",\n    \"horario_visita\": \"martes de la próxima semana\",\n    \"horario_visita_fecha\": \"21/10/2025\",\n    \"horario_visita_hora\": \"\"\n  }\n\n  Ejemplo 3:\n  Usuario: \"mañana por la mañana\"\n  Respuesta:\n  {\n    \"nombre\": \"\",\n    \"rubro\": \"\",\n    \"horario_visita\": \"mañana por la mañana\",\n    \"horario_visita_fecha\": \"15/10/2025\",\n    \"horario_visita_hora\": \"\"\n  }\n\n  Ejemplo 4:\n  Usuario: \"dentro de 5 días a las 10am\"\n  Respuesta:\n  {\n    \"nombre\": \"\",\n    \"rubro\": \"\",\n    \"horario_visita\": \"dentro de 5 días a las 10am\",\n    \"horario_visita_fecha\": \"19/10/2025\",\n    \"horario_visita_hora\": \"10:00am\"\n  }\n\n  ═══════════════════════════════════════════════════════\n  FORMATO DE RESPUESTA (JSON estricto):\n  ═══════════════════════════════════════════════════════\n  {\n    \"nombre\": \"\",\n    \"rubro\": \"\",\n    \"horario_visita\": \"\",\n    \"horario_visita_fecha\": \"\",\n    \"horario_visita_hora\": \"\"\n  }",
              "role": "system"
            },
            {
              "content": "=CONVERSACIÓN COMPLETA:\n{{ $node[\"Code1\"].json.historial }}\n\nMENSAJE ACTUAL DEL USUARIO:\n{{ $node[\"Code1\"].json.userMessage }}\n\nDATOS PREVIAMENTE CAPTURADOS:\n- Nombre anterior: {{ $node[\"Code1\"].json.nombre_actual || \"ninguno\" }}\n- Rubro anterior: {{ $node[\"Code1\"].json.rubro_previo || \"ninguno\" }}\n- Horario anterior: {{ $node[\"Code1\"].json.horario_previo || \"ninguno\" }}\n\nExtrae SOLO nueva información del mensaje actual. Si no hay datos nuevos, devuelve campos vacíos."
            }
          ]
        },
        "jsonOutput": true,
        "options": {
          "temperature": 0
        }
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -1616,
        -96
      ],
      "id": "09c6452f-319c-4c50-af8d-d487e9f533d6",
      "name": "OpenAI - Extract Data",
      "credentials": {
        "openAiApi": {
          "id": "WhavwmgjOQKegim4",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get extracted data from OpenAI\n  const extractedRaw = $json?.message?.content;\n  let extracted = { horario_visita_fecha: \"\", horario_visita_hora: \"\" };\n\n  try {\n    if (typeof extractedRaw === \"string\") {\n      extracted = JSON.parse(extractedRaw);\n    } else if (typeof extractedRaw === \"object\" && extractedRaw) {\n      extracted = extractedRaw;\n    }\n  } catch (e) {\n    // Si falla el parsing, devuelve null\n    return [{ json: { horario_visita_timestamp: null } }];\n  }\n\n  const fecha = (extracted.horario_visita_fecha || \"\").trim();\n  const hora = (extracted.horario_visita_hora || \"\").trim();\n\n  // Si no hay fecha O no hay hora, timestamp es null\n  if (!fecha || !hora) {\n    return [{ json: { horario_visita_timestamp: null } }];\n  }\n\n  // Parse fecha DD/MM/YYYY\n  const parts = fecha.split('/');\n  if (parts.length !== 3) {\n    return [{ json: { horario_visita_timestamp: null } }];\n  }\n\n  const day = parseInt(parts[0], 10);\n  const month = parseInt(parts[1], 10);\n  const year = parseInt(parts[2], 10);\n\n  // Validate date components\n  if (!day || !month || !year || month < 1 || month > 12 || day < 1 || day > 31) {\n    return [{ json: { horario_visita_timestamp: null } }];\n  }\n\n  // Parse hora H:MMam/pm or HH:MMam/pm\n  const horaMatch = hora.match(/^(\\d{1,2}):(\\d{2})\\s*(am|pm)$/i);\n  if (!horaMatch) {\n    return [{ json: { horario_visita_timestamp: null } }];\n  }\n\n  let hours = parseInt(horaMatch[1], 10);\n  const minutes = parseInt(horaMatch[2], 10);\n  const ampm = horaMatch[3].toLowerCase();\n\n  // Convert to 24-hour format\n  if (ampm === 'pm' && hours !== 12) {\n    hours += 12;\n  } else if (ampm === 'am' && hours === 12) {\n    hours = 0;\n  }\n\n  // ✅ FIX CRÍTICO: Crear ISO string con timezone EXPLÍCITO de Lima (-05:00)\n  try {\n    // Construir string ISO con offset de Lima\n    const limaDateString = `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2,\n  '0')}T${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:00-05:00`;\n\n    // JavaScript Date convierte automáticamente a UTC\n    const dateObj = new Date(limaDateString);\n\n    // Validar que la fecha es válida\n    if (isNaN(dateObj.getTime())) {\n      return [{ json: { horario_visita_timestamp: null } }];\n    }\n\n    // Retornar ISO string en UTC (ya convertido correctamente)\n    return [{ json: { horario_visita_timestamp: dateObj.toISOString() } }];\n\n  } catch (e) {\n    return [{ json: { horario_visita_timestamp: null } }];\n  }"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1824,
        -32
      ],
      "id": "2205ae2f-355e-4d51-9b89-1b0347db4bb8",
      "name": "Parse Horario to Timestamp"
    },
    {
      "parameters": {
        "url": "https://raw.githubusercontent.com/iterruptivo/ecoplaza-agente-ia/refs/heads/main/ecoplaza-instrucciones-agente-callao.txt",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2864,
        -208
      ],
      "id": "a7e9f1b7-f40b-457c-aa6a-9b3ec900088a",
      "name": "HTTP Request (GitHub)",
      "credentials": {
        "httpHeaderAuth": {
          "id": "MLXcKawD1e0ddlpV",
          "name": "WhatsApp Graph API (Test)"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://graph.facebook.com/v21.0/{{ $json.phone_number_id }}/messages",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpCustomAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"messaging_product\": \"whatsapp\",\n  \"status\": \"read\",\n  \"message_id\": \"{{ $json.message_id }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3152,
        -208
      ],
      "id": "f542ed66-fa17-4195-98b7-69577d6e5aa8",
      "name": "HTTP Request - Mark Message as Read",
      "credentials": {
        "httpCustomAuth": {
          "id": "P5pI2f13ZFQRYvYM",
          "name": "WhatsApp Graph API (EcoPlaza Victoria Callao - Eco Plaza Business)"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const v = $json.body.entry[0].changes[0].value;\nconst telefono = v.messages[0].from;\n\nreturn [{\n  json: {\n    phone_number_id: v.metadata.phone_number_id,\n    message_id: v.messages[0].id,\n    telefono: telefono,\n    body: $json.body\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3472,
        -208
      ],
      "id": "92b9f0b3-dc52-41c5-ad4e-5a0d69c0ab87",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "Eres un asistente que resume conversaciones de WhatsApp para CRM.\nDevuelve SOLO un JSON válido con:\n{\n  \"resumen_historial\": string\n}\nReglas:\n- \"resumen_historial\": síntesis clara y fiel de TODO el historial (sin inventar).\n- No incluyas comentarios; solo JSON válido.",
              "role": "system"
            },
            {
              "content": "=HISTORIAL COMPLETO:\n{{ $json.historial_conversacion || '' }}"
            }
          ]
        },
        "jsonOutput": true,
        "options": {
          "temperature": 0
        }
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -2272,
        336
      ],
      "id": "c58456d7-7066-4ae3-a01e-34c1ee743248",
      "name": "OpenAI Summarize History",
      "credentials": {
        "openAiApi": {
          "id": "WhavwmgjOQKegim4",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "clashHandling": {
            "values": {
              "resolveClash": "preferInput1",
              "overrideEmpty": true
            }
          },
          "includeUnpaired": true
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -1520,
        208
      ],
      "id": "faceb1d6-84d3-4dc2-9717-882e3e5f8409",
      "name": "Merge1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2ea392d8-056e-48f8-ae01-4d9bd10de00a",
              "name": "resumen_historial",
              "value": "={{ $json.message?.content?.resumen_historial || $json.resumen_historial || '' }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1760,
        304
      ],
      "id": "d2b34a10-2aac-4fb8-a44d-b8cd65743bc7",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "81984b69-9b4d-4bf1-8e5e-9caaa32c34bf",
              "leftValue": "={{ $json.estado }}",
              "rightValue": "=en_conversacion",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            },
            {
              "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
              "leftValue": "={{ $json.notificacion_enviada.toString() }}",
              "rightValue": "=false",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1344,
        144
      ],
      "id": "aa731eb0-0052-41bc-9c37-7ed2af22d515",
      "name": "IF - Conversacion Cerrada?"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://graph.facebook.com/v21.0/771452262728711/messages",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpCustomAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"messaging_product\": \"whatsapp\",\n  \"to\": \"{{ $json.vendor_phone }}\",\n  \"text\": {\n    \"body\": \"{{ $json.notification_message }}\"\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        144,
        -352
      ],
      "id": "56b5f3aa-d698-4cf2-8906-5c906ea7c07e",
      "name": "WhatsApp - Send Vendor Notification",
      "credentials": {
        "httpCustomAuth": {
          "id": "P5pI2f13ZFQRYvYM",
          "name": "WhatsApp Graph API (EcoPlaza Victoria Callao - Eco Plaza Business)"
        }
      }
    },
    {
      "parameters": {
        "jsCode": " // Obtener datos del lead desde Code2\n  const leadData = $node[\"Code2\"]?.json || {};\n\n  // Capturar estado SOLO si es la primera notificación\n  const estado_al_notificar = leadData.notificacion_enviada === false\n    ? leadData.estado\n    : leadData.estado_al_notificar;\n\n  // Marcar como notificado\n  return [{\n    json: {\n      ...leadData,\n      notificacion_enviada: true,\n      estado_al_notificar: estado_al_notificar\n    }\n  }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -400,
        -48
      ],
      "id": "508e6fa0-a106-491f-b72a-98e23059287c",
      "name": "Code - Get First Item"
    },
    {
      "parameters": {
        "jsCode": "// === 1) Lead desde el nodo \"IF - Conversacion Cerrada?\" ===\nconst leadItem = $items(\"IF - Conversacion Cerrada?\", 0, 0);\nconst leadData = leadItem?.json || {};\n\n// Obtener el estado desde Code2 (es la fuente más confiable)\nconst estado = leadData.estado || $node[\"Code2\"]?.json?.estado || \"en_conversacion\";\n\n// === 2) Vendedores ===\nconst vendedores = $input.all();\n\n// === 3) Formatear estado y mensaje ===\nconst estadoUpper = estado.toUpperCase().replace(/_/g, \" \");\nconst mensaje = `Nuevo Lead Proyecto Trapiche - Estado: ${estadoUpper}`;\n\n// === 4) Crear items por vendedor ===\nreturn vendedores\n  .map(v => v?.json)\n  .filter(v => v && v.telefono)\n  .map(v => ({\n    json: {\n      vendor_phone: v.telefono,\n      vendor_name: v.nombre,\n      notification_message: mensaje,\n      ...leadData,\n    },\n  }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -352,
        -368
      ],
      "id": "f845b00e-e812-4bea-9505-940e32914c47",
      "name": "Code - Format Vendor Notifications"
    },
    {
      "parameters": {
        "batchSize": 10,
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -144,
        -368
      ],
      "id": "7d40c553-ae9d-4b9e-8455-093d1c97df13",
      "name": "Split In Batches - Vendors"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -80,
        -32
      ],
      "id": "530456f9-16a8-409e-aaf5-72b729065c46",
      "name": "Wait",
      "webhookId": "17c1ee0a-76d5-4d31-941d-4690ac69775e"
    },
    {
      "parameters": {
        "url": "=https://qssefegfzxxurqbzndrs.supabase.co/rest/v1/leads?telefono=eq.{{ $node[\"Webhook: Recibir WhatsApp\"].json.body.entry[0].changes[0].value.messages[0].from }}&select=*",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFzc2VmZWdmenh4dXJxYnpuZHJzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAxMjA2MTEsImV4cCI6MjA3NTY5NjYxMX0.O6GW7ODPKK4asqDpsnA5Ejn11r_bz3Eklp5qk-1QOiQ"
            },
            {
              "name": "apikey",
              "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFzc2VmZWdmenh4dXJxYnpuZHJzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAxMjA2MTEsImV4cCI6MjA3NTY5NjYxMX0.O6GW7ODPKK4asqDpsnA5Ejn11r_bz3Eklp5qk-1QOiQ"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2576,
        -208
      ],
      "id": "2008d88e-0be0-45fc-b6b0-90cb280aaecc",
      "name": "Supabase - Get Lead",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "url": "https://qssefegfzxxurqbzndrs.supabase.co/rest/v1/vendedores?activo=eq.true&select=*",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFzc2VmZWdmenh4dXJxYnpuZHJzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAxMjA2MTEsImV4cCI6MjA3NTY5NjYxMX0.O6GW7ODPKK4asqDpsnA5Ejn11r_bz3Eklp5qk-1QOiQ"
            },
            {
              "name": "apikey",
              "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFzc2VmZWdmenh4dXJxYnpuZHJzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAxMjA2MTEsImV4cCI6MjA3NTY5NjYxMX0.O6GW7ODPKK4asqDpsnA5Ejn11r_bz3Eklp5qk-1QOiQ"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -544,
        -368
      ],
      "id": "e3a8befb-b20c-4786-bd7f-efed4cb3efdd",
      "name": "Supabase - Get Vendedores"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "62b93104-2e80-460f-9646-337343ff3daa",
              "leftValue": "={{ !$json.notificacion_enviada }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -960,
        -144
      ],
      "id": "6f2deeac-773e-4a17-bda3-65fe55ce8307",
      "name": "If1"
    },
    {
      "parameters": {
        "url": "=https://qssefegfzxxurqbzndrs.supabase.co/rest/v1/leads?telefono=eq.{{ $json.telefono }}&select=*",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFzc2VmZWdmenh4dXJxYnpuZHJzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAxMjA2MTEsImV4cCI6MjA3NTY5NjYxMX0.O6GW7ODPKK4asqDpsnA5Ejn11r_bz3Eklp5qk-1QOiQ"
            },
            {
              "name": "apikey",
              "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFzc2VmZWdmenh4dXJxYnpuZHJzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAxMjA2MTEsImV4cCI6MjA3NTY5NjYxMX0.O6GW7ODPKK4asqDpsnA5Ejn11r_bz3Eklp5qk-1QOiQ"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1216,
        -144
      ],
      "id": "8b39db1b-7950-4528-9def-9866b1bd6b67",
      "name": "Supabase - Get Lead1",
      "credentials": {
        "httpHeaderAuth": {
          "id": "MLXcKawD1e0ddlpV",
          "name": "WhatsApp Graph API (Test)"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://qssefegfzxxurqbzndrs.supabase.co/rest/v1/leads",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFzc2VmZWdmenh4dXJxYnpuZHJzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAxMjA2MTEsImV4cCI6MjA3NTY5NjYxMX0.O6GW7ODPKK4asqDpsnA5Ejn11r_bz3Eklp5qk-1QOiQ"
            },
            {
              "name": "apikey",
              "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFzc2VmZWdmenh4dXJxYnpuZHJzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAxMjA2MTEsImV4cCI6MjA3NTY5NjYxMX0.O6GW7ODPKK4asqDpsnA5Ejn11r_bz3Eklp5qk-1QOiQ"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Prefer",
              "value": "resolution=merge-duplicates"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "telefono",
              "value": "={{ $json.telefono }}"
            },
            {
              "name": "nombre",
              "value": "={{ $json.nombre }}"
            },
            {
              "name": "rubro",
              "value": "={{ $json.rubro }}"
            },
            {
              "name": "horario_visita",
              "value": "={{ $json.horario_visita }}"
            },
            {
              "name": "horario_visita_timestamp",
              "value": "={{ $json.horario_visita_timestamp }}"
            },
            {
              "name": "estado",
              "value": "={{ $json.estado }}"
            },
            {
              "name": "historial_conversacion",
              "value": "={{ $json.historial_conversacion }}"
            },
            {
              "name": "historial_reciente",
              "value": "={{ $json.historial_reciente }}"
            },
            {
              "name": "resumen_historial",
              "value": "={{ $json.resumen_historial }}"
            },
            {
              "name": "ultimo_mensaje",
              "value": "={{ $json.ultimo_mensaje }}"
            },
            {
              "name": "intentos_bot",
              "value": "={{ $json.intentos_bot }}"
            },
            {
              "name": "fecha_captura",
              "value": "={{ $json.fecha_captura }}"
            },
            {
              "name": "notificacion_enviada",
              "value": "={{ $json.notificacion_enviada }}"
            },
            {
              "name": "estado_al_notificar",
              "value": "={{$json.estado_al_notificar}}"
            },
            {
              "name": "proyecto_id",
              "value": "0661ce3d-4a99-4f7d-82bf-242ecfa58f28"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -528,
        288
      ],
      "id": "a8e16fe7-b875-45de-80a0-358906c65044",
      "name": "Supabase - Upsert Lead - EcoPlaza Trapiche - Prod"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook: Recibir WhatsApp": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code - Extract Audio Info",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model": {
      "main": [
        [
          {
            "node": "OpenAI - Extract Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "OpenAI Summarize History",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - Extract Audio Info": {
      "main": [
        [
          {
            "node": "HTTP Request - Get Audio URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request - Get Audio URL": {
      "main": [
        [
          {
            "node": "HTTP Request - Download Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request - Download Audio": {
      "main": [
        [
          {
            "node": "OpenAI - Whisper Transcribe",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI - Whisper Transcribe": {
      "main": [
        [
          {
            "node": "Code - Format Transcription",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - Format Transcription": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI - Extract Data": {
      "main": [
        [
          {
            "node": "Parse Horario to Timestamp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Horario to Timestamp": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request (GitHub)": {
      "main": [
        [
          {
            "node": "Supabase - Get Lead",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request - Mark Message as Read": {
      "main": [
        [
          {
            "node": "HTTP Request (GitHub)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "HTTP Request - Mark Message as Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Summarize History": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "IF - Conversacion Cerrada?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "IF - Conversacion Cerrada?": {
      "main": [
        [
          {
            "node": "Supabase - Get Lead1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Supabase - Upsert Lead - EcoPlaza Trapiche - Prod",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WhatsApp - Send Vendor Notification": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - Get First Item": {
      "main": [
        [
          {
            "node": "Supabase - Upsert Lead - EcoPlaza Trapiche - Prod",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - Format Vendor Notifications": {
      "main": [
        [
          {
            "node": "Split In Batches - Vendors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split In Batches - Vendors": {
      "main": [
        [
          {
            "node": "Code - Get First Item",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "WhatsApp - Send Vendor Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Split In Batches - Vendors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase - Get Lead": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase - Get Vendedores": {
      "main": [
        [
          {
            "node": "Code - Format Vendor Notifications",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Supabase - Get Vendedores",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Supabase - Upsert Lead - EcoPlaza Trapiche - Prod",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase - Get Lead1": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [],
        []
      ]
    },
    "Supabase - Upsert Lead - EcoPlaza Trapiche - Prod": {
      "main": [
        [
          {
            "node": "Send message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "5dd9bac5-7c17-4208-9bea-9497887e75e9",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ac495b013a9dddb9724430276f2a1ebc03086cb4690790d0c3f0b57736633d28"
  },
  "id": "dMbR0LmkPJx6SjX8",
  "tags": [
    {
      "createdAt": "2025-10-05T15:49:21.676Z",
      "updatedAt": "2025-10-05T15:49:21.676Z",
      "id": "kW6ZhQEWOP50a5HL",
      "name": "IA Agent Bot"
    }
  ]
}