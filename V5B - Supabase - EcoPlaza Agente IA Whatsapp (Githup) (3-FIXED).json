{
  "name": "V5B - Supabase - EcoPlaza Agente IA Whatsapp (Githup)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "whatsapp-eco",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -1616,
        -32
      ],
      "id": "b012c25c-275d-479d-9fa3-4bcb496721f0",
      "name": "Webhook: Recibir WhatsApp",
      "webhookId": "cce6941e-eeff-40ab-98de-c3e5e549d25d"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.query[\"hub.challenge\"] }}",
        "options": {
          "responseCode": 200
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -944,
        -224
      ],
      "id": "a93cb0eb-34b4-43d3-bf00-3dae1f6bbdd8",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.body.entry[0].changes[0].value.messages[0].type }}",
                    "rightValue": "text",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "dbcc75b1-9deb-49c4-8f55-34b8d3c23455"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "text"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "0d57ef7c-87b7-44a5-9374-4082c3398cac",
                    "leftValue": "={{ $json.body[\"hub.mode\"] }}",
                    "rightValue": "subscribe",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "verification"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "d9c90a3f-fc16-4e84-bebb-2c87048cd4f1",
                    "leftValue": "={{ $json.body.entry[0].changes[0].value.messages[0].type }}",
                    "rightValue": "audio",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "audio"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.3,
      "position": [
        -1200,
        -48
      ],
      "id": "846ff8f2-b8cf-4071-80e8-b7722485f427",
      "name": "Switch"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=--- DOCUMENTO (fuente de verdad, no inventes nada) ---\n{{ $json.knowledgeBase || '' }}\n--- FIN ---\n\nINFORMACI√ìN DEL USUARIO:\n{{ $json.nombre_actual ? \"Nombre: \" + $json.nombre_actual : \"A√∫n no ha proporcionado su nombre\" }}\n\nHISTORIAL DE CONVERSACI√ìN:\n{{ $json.historial || '' }}\n\nINSTRUCCI√ìN IMPORTANTE: Si ya conoces el nombre del usuario, NO vuelvas a pedirlo. NO te presentes de nuevo si ya iniciaste la conversaci√≥n antes. Contin√∫a naturalmente la conversaci√≥n.",
              "role": "system"
            },
            {
              "content": "={{ $json.userMessage || '' }}"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        848,
        -48
      ],
      "id": "25dab418-a40f-4acf-988a-80400ced486e",
      "name": "Message a model",
      "credentials": {
        "openAiApi": {
          "id": "WhavwmgjOQKegim4",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "send",
        "phoneNumberId": "859011830622528",
        "recipientPhoneNumber": "={{ $node[\"Webhook: Recibir WhatsApp\"].json.body.entry[0].changes[0].value.contacts[0].wa_id }}\n",
        "textBody": "={{ $node[\"Code2\"].json.mensaje_bot_final }}",
        "additionalFields": {
          "previewUrl": false
        }
      },
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1,
      "position": [
        3264,
        320
      ],
      "id": "ff79060f-7736-4297-a537-9f48354508eb",
      "name": "Send message",
      "webhookId": "7c64d128-f027-442b-90aa-873b0054d6b0",
      "credentials": {
        "whatsAppApi": {
          "id": "MaqucdVEXd2ZnLlT",
          "name": "WhatsApp account (Business - iterruptivo)"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "c1313a0d-5d8f-497f-a0d5-7dc9aeadf3e2",
              "leftValue": "=={{ $json.query['hub.mode'] }}",
              "rightValue": "subscribe",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1408,
        -208
      ],
      "id": "52673112-fc8e-4913-847b-99fcab5891eb",
      "name": "If"
    },
    {
      "parameters": {
        "jsCode": "// Entradas\nconst botResponse = $node[\"Message a model\"].json?.message?.content || \"\";\nconst telefono = $node[\"Code1\"].json.telefono || \"\";\nconst historialPrevio = $node[\"Code1\"].json.historial || \"\";\nconst userMessage = $node[\"Code1\"].json.userMessage || \"\";\n\nconst nombrePrevio = $node[\"Code1\"].json.nombre_actual || \"\";\nconst rubroPrevio = $node[\"Code1\"].json.rubro_previo || \"\";\nconst horarioPrevio = $node[\"Code1\"].json.horario_previo || \"\";\n\n// Datos extra√≠dos por GPT\nconst extractedRaw = $node[\"OpenAI - Extract Data\"].json?.message?.content;\nlet extracted = { nombre: \"\", rubro: \"\", horario_visita: \"\", horario_visita_fecha: \"\", horario_visita_hora: \"\" };\ntry {\n  if (typeof extractedRaw === \"string\") extracted = JSON.parse(extractedRaw);\n  else if (typeof extractedRaw === \"object\" && extractedRaw) extracted = extractedRaw;\n} catch (e) { /* default */ }\n\nconst nombre = (extracted.nombre || \"\").trim() || nombrePrevio;\nconst rubro = (extracted.rubro || \"\").trim() || rubroPrevio;\nconst horario = (extracted.horario_visita || \"\").trim() || horarioPrevio;\n\n// NUEVO: Parse horario_visita_timestamp from extracted data\nconst horario_visita_fecha = (extracted.horario_visita_fecha || \"\").trim();\nconst horario_visita_hora = (extracted.horario_visita_hora || \"\").trim();\n\n// Parse timestamp (if both fecha and hora are present)\nconst horario_visita_timestamp = $node[\"Parse Horario to Timestamp\"].json?.horario_visita_timestamp || null;\n\n// Contar intentos\nconst noaMessages = (historialPrevio.match(/\\nAgenteIA:/g) || []).length;\n\nlet estado = \"en_conversacion\";\nlet debeForazarCierre = false;\n\n// ---- L√ìGICA INTELIGENTE DE ESTADOS ----\n\n// 1. Si tiene TODOS los datos ‚Üí Lead completo (puede seguir preguntando)\nif (nombre && rubro && horario) {\n  estado = \"lead_completo\";\n  debeForazarCierre = false;  // NUNCA forzar cierre si tiene datos completos\n}\n// 2. Si tiene ALGUNOS datos (parcial)\nelse if (nombre || rubro || horario) {\n  // Dar m√°s oportunidades (8 intentos) porque muestra inter√©s\n  if (noaMessages >= 8) {\n    estado = \"lead_incompleto\";\n    debeForazarCierre = true;\n  } else {\n    estado = \"en_conversacion\";\n    debeForazarCierre = false;\n  }\n}\n// 3. Si NO tiene NING√öN dato\nelse {\n  // Cerrar antes (5 intentos) porque no muestra inter√©s real\n  if (noaMessages >= 5) {\n    estado = \"conversacion_abandonada\";\n    debeForazarCierre = true;\n  } else {\n    estado = \"en_conversacion\";\n    debeForazarCierre = false;\n  }\n}\n\n// ---- MENSAJE FINAL ----\nlet mensajeBot = botResponse;\n\n// Solo forzar cierre si corresponde\nif (debeForazarCierre) {\n  mensajeBot = \"Su caso es importante para nosotros, pronto un asesor especializado se comunicar√° con usted para atender sus consultas de forma detallada, mant√©ngase al pendiente por favor. ü§ó\";\n}\n\n// Construir historial completo (NO duplicar mensaje de usuario, ya est√° en historialPrevio)\nconst historial_conversacion =\n  (historialPrevio ? historialPrevio + \"\\n\" : \"\") +\n  \"AgenteIA: \" + mensajeBot;\n\n// √öltimos 10 mensajes\nconst lines = historial_conversacion.split(/\\r?\\n/).filter(Boolean);\nconst historial_reciente = lines.slice(-10).join(\"\\n\");\n\nreturn [{\n  json: {\n    telefono: telefono,\n    nombre: nombre,\n    rubro: rubro,\n    horario_visita: horario,\n    horario_visita_timestamp: horario_visita_timestamp,\n    historial_conversacion,\n    historial_reciente,\n    fecha_captura: new Date().toISOString(),\n    ultimo_mensaje: userMessage,\n    estado: estado,\n    intentos_bot: noaMessages + 1,\n    mensaje_bot_final: mensajeBot,\n    notificacion_enviada: false,\n    estado_al_notificar: null\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        224
      ],
      "id": "9a322253-cbf0-4db4-92e3-8b1dce0609cf",
      "name": "Code2"
    },
    {
      "parameters": {
        "jsCode": "// --- Fuentes posibles ---\nconst fromTranscription = $json.userMessage;\nconst fromWebhook = $node[\"Webhook: Recibir WhatsApp\"].json?.body?.entry?.[0]?.changes?.[0]?.value?.messages?.[0]?.text?.body;\n\n// Mensaje final del usuario (nunca null)\nconst userMessage = (fromTranscription ?? fromWebhook ?? \"\").toString().trim();\n\n// Tel√©fono\nconst telefono =\n  $json.telefono ??\n  $node[\"Webhook: Recibir WhatsApp\"].json?.body?.entry?.[0]?.changes?.[0]?.value?.messages?.[0]?.from ??\n  \"\";\n\n// Base de conocimiento\nconst knowledgeBase =\n  $node[\"HTTP Request (GitHub)\"].json?.data ??\n  $node[\"HTTP Request (GitHub)\"].json ??\n  $json.knowledgeBase ?? \"\";\n\n// SUPABASE: Manejar respuesta (array o undefined)\nlet leadData = {};\n\ntry {\n  const supabaseResponse = $node[\"Supabase - Get Lead\"].json;\n  \n  // Supabase siempre devuelve array\n  if (Array.isArray(supabaseResponse) && supabaseResponse.length > 0) {\n    leadData = supabaseResponse[0];\n  } else if (supabaseResponse && !Array.isArray(supabaseResponse)) {\n    // Por si acaso devuelve un objeto directo\n    leadData = supabaseResponse;\n  }\n} catch (e) {\n  // Si falla, leadData queda como objeto vac√≠o\n  console.log(\"Error obteniendo lead:\", e);\n}\n\n// Datos previos del lead\nconst nombrePrevio = leadData.nombre ?? \"\";\nconst rubroPrevio = leadData.rubro ?? \"\";\nconst horarioPrevio = leadData.horario_visita ?? \"\";\nconst historialPrevio = leadData.historial_conversacion ?? \"\";\n\n// Actualiza historial\nconst historial = (historialPrevio ? historialPrevio + \"\\n\" : \"\") + \"Usuario: \" + userMessage;\n\nreturn [{\n  json: {\n    telefono,\n    userMessage,\n    knowledgeBase,\n    historial,\n    nombre_actual: nombrePrevio,\n    rubro_previo: rubroPrevio,\n    horario_previo: horarioPrevio,\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        576,
        -48
      ],
      "id": "5362d0fc-d804-4644-8a5d-7f1b8c06b753",
      "name": "Code1"
    },
    {
      "parameters": {
        "jsCode": "// --- Lee el mensaje entrante ---\nconst webhookData = $node[\"Webhook: Recibir WhatsApp\"].json;\nconst messageData = webhookData.body.entry[0].changes[0].value.messages[0];\n\n// --- Datos que necesitamos ---\nconst telefono = messageData.from;\nconst mediaId = messageData.audio.id;\n\n// --- Devuelve los campos al flujo ---\nreturn [{\n  json: {\n    telefono,\n    mediaId,\n    isAudio: true\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1376,
        304
      ],
      "id": "bf154790-8468-4382-9de5-12c1ec30367a",
      "name": "Code - Extract Audio Info"
    },
    {
      "parameters": {
        "url": "=https://graph.facebook.com/v21.0/{{ $json.mediaId }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpCustomAuth",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1104,
        304
      ],
      "id": "bc20398d-9d48-4a46-8d7f-2c080e64a0ae",
      "name": "HTTP Request - Get Audio URL",
      "credentials": {
        "httpCustomAuth": {
          "id": "vYJ67DysgTKJEf0q",
          "name": "WhatsApp Graph API (Custom - Business iterruptivo)"
        }
      }
    },
    {
      "parameters": {
        "url": "={{$json.url}}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpCustomAuth",
        "options": {
          "redirect": {
            "redirect": {
              "followRedirects": false
            }
          },
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "file"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -816,
        304
      ],
      "id": "ce36ec37-519f-4a4f-9a27-f2c3b9b7604b",
      "name": "HTTP Request - Download Audio",
      "credentials": {
        "httpCustomAuth": {
          "id": "vYJ67DysgTKJEf0q",
          "name": "WhatsApp Graph API (Custom - Business iterruptivo)"
        }
      }
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {
          "language": "es"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -544,
        304
      ],
      "id": "e2235466-e7cc-484a-9890-676fa2f19067",
      "name": "OpenAI - Whisper Transcribe",
      "credentials": {
        "openAiApi": {
          "id": "WhavwmgjOQKegim4",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Obtener el tel√©fono del primer nodo de audio\nconst telefono = $node[\"Code - Extract Audio Info\"].json.telefono;\n\n// Obtener la transcripci√≥n de Whisper\nconst transcripcion = $json.text || '';\n\nreturn [{\n  json: {\n    telefono: telefono,\n    userMessage: transcripcion,\n    isAudio: true,\n    body: {\n      entry: [{\n        changes: [{\n          value: {\n            messages: [{\n              from: telefono,\n              text: {\n                body: transcripcion\n              }\n            }]\n          }\n        }]\n      }]\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -320,
        304
      ],
      "id": "b3584d6a-26a4-44b2-9146-7e8420ca0ddf",
      "name": "Code - Format Transcription"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "clashHandling": {
            "values": {
              "resolveClash": "preferLast"
            }
          },
          "includeUnpaired": true
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        320,
        -48
      ],
      "id": "74712278-cbcc-4522-b95d-8aa94a0d72a6",
      "name": "Merge"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "Eres un extractor de datos experto. Analiza la conversaci√≥n y extrae SOLO la informaci√≥n solicitada.\n\nDATOS A EXTRAER:\n1. nombre: El nombre completo de la persona (solo si lo menciona expl√≠citamente)\n2. rubro: El tipo de negocio, producto o actividad comercial (ej: ferreter√≠a, bazar, pescado, ropa, etc.)\n3. horario_visita: D√≠a y/u horario para una visita (ej: lunes 3pm, martes por la tarde, etc.)\n4. horario_visita_fecha: Fecha en formato DD/MM/YYYY (solo si el usuario menciona un horario)\n5. horario_visita_hora: Hora en formato H:MMam/pm (solo si el usuario menciona un horario)\n\nCONTEXTO TEMPORAL (para parsear fechas relativas):\n- Hoy es: {{$now.format('DD/MM/YYYY')}}\n- Timezone: America/Lima\n\nREGLAS DE PARSING DE FECHAS:\n- \"ma√±ana\" = {{$now.plus({days: 1}).format('DD/MM/YYYY')}}\n- \"pasado ma√±ana\" = {{$now.plus({days: 2}).format('DD/MM/YYYY')}}\n- \"el lunes\" = pr√≥ximo lunes desde hoy\n- Si solo dice hora sin fecha, asume es para hoy\n- Si dice \"por la ma√±ana\" sin hora espec√≠fica, usa 9:00AM\n- Si dice \"por la tarde\" sin hora espec√≠fica, usa 3:00PM\n- IMPORTANTE: Si NO menciona horario de visita, deja horario_visita_fecha y horario_visita_hora VAC√çOS\n\nREGLAS CR√çTICAS:\n- Si un dato NO est√° presente en la conversaci√≥n, devuelve vac√≠o (\"\") para ese campo\n- NO inventes informaci√≥n\n- NO repitas datos de mensajes anteriores si no se mencionan en el mensaje actual\n- Si la persona solo saluda, todos los campos van vac√≠os\n\nFORMATO DE RESPUESTA (JSON estricto):\n{\n  \"nombre\": \"\",\n  \"rubro\": \"\",\n  \"horario_visita\": \"\",\n  \"horario_visita_fecha\": \"\",\n  \"horario_visita_hora\": \"\"\n}",
              "role": "system"
            },
            {
              "content": "=CONVERSACI√ìN COMPLETA:\n{{ $node[\"Code1\"].json.historial }}\n\nMENSAJE ACTUAL DEL USUARIO:\n{{ $node[\"Code1\"].json.userMessage }}\n\nDATOS PREVIAMENTE CAPTURADOS:\n- Nombre anterior: {{ $node[\"Code1\"].json.nombre_actual || \"ninguno\" }}\n- Rubro anterior: {{ $node[\"Code1\"].json.rubro_previo || \"ninguno\" }}\n- Horario anterior: {{ $node[\"Code1\"].json.horario_previo || \"ninguno\" }}\n\nExtrae SOLO nueva informaci√≥n del mensaje actual. Si no hay datos nuevos, devuelve campos vac√≠os."
            }
          ]
        },
        "jsonOutput": true,
        "options": {
          "temperature": 0
        }
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        1088,
        64
      ],
      "id": "e40c59ce-1bf6-44e0-8b26-4815f1c92ced",
      "name": "OpenAI - Extract Data",
      "credentials": {
        "openAiApi": {
          "id": "WhavwmgjOQKegim4",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get extracted data from OpenAI\nconst extractedRaw = $json?.message?.content;\nlet extracted = { horario_visita_fecha: \"\", horario_visita_hora: \"\" };\n\ntry {\n  if (typeof extractedRaw === \"string\") {\n    extracted = JSON.parse(extractedRaw);\n  } else if (typeof extractedRaw === \"object\" && extractedRaw) {\n    extracted = extractedRaw;\n  }\n} catch (e) {\n  // Si falla el parsing, devuelve null\n  return [{ json: { horario_visita_timestamp: null } }];\n}\n\nconst fecha = (extracted.horario_visita_fecha || \"\").trim();\nconst hora = (extracted.horario_visita_hora || \"\").trim();\n\n// Si no hay fecha O no hay hora, timestamp es null\nif (!fecha || !hora) {\n  return [{ json: { horario_visita_timestamp: null } }];\n}\n\n// Parse fecha DD/MM/YYYY\nconst [day, month, year] = fecha.split('/').map(x => parseInt(x, 10));\n\n// Parse hora H:MMam/pm\nconst horaMatch = hora.match(/(\\d{1,2}):(\\d{2})(am|pm)/i);\nif (!horaMatch) {\n  return [{ json: { horario_visita_timestamp: null } }];\n}\n\nlet hours = parseInt(horaMatch[1], 10);\nconst minutes = parseInt(horaMatch[2], 10);\nconst ampm = horaMatch[3].toLowerCase();\n\n// Convert to 24-hour format\nif (ampm === 'pm' && hours !== 12) hours += 12;\nif (ampm === 'am' && hours === 12) hours = 0;\n\n// Create ISO timestamp (timezone America/Lima = UTC-5)\ntry {\n  const timestamp = new Date(year, month - 1, day, hours, minutes, 0, 0).toISOString();\n  return [{ json: { horario_visita_timestamp: timestamp } }];\n} catch (e) {\n  return [{ json: { horario_visita_timestamp: null } }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1328,
        64
      ],
      "id": "NEW-PARSE-HORARIO-NODE-ID",
      "name": "Parse Horario to Timestamp"
    },
    {
      "parameters": {
        "url": "https://raw.githubusercontent.com/iterruptivo/ecoplaza-agente-ia/refs/heads/main/ecoplaza-instrucciones-agente.txt",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -336,
        -64
      ],
      "id": "41d334d6-23bf-4a64-bf05-96c8f85233d0",
      "name": "HTTP Request (GitHub)",
      "credentials": {
        "httpHeaderAuth": {
          "id": "ilMGirJWHVtqUPrH",
          "name": "Header Auth account (githup)"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://graph.facebook.com/v21.0/{{ $json.phone_number_id }}/messages",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpCustomAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"messaging_product\": \"whatsapp\",\n  \"status\": \"read\",\n  \"message_id\": \"{{ $json.message_id }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -624,
        -64
      ],
      "id": "8c13d61e-759f-490f-b567-ec00fc0c5caf",
      "name": "HTTP Request - Mark Message as Read",
      "credentials": {
        "httpCustomAuth": {
          "id": "vYJ67DysgTKJEf0q",
          "name": "WhatsApp Graph API (Custom - Business iterruptivo)"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const v = $json.body.entry[0].changes[0].value;\nconst telefono = v.messages[0].from;\n\nreturn [{\n  json: {\n    phone_number_id: v.metadata.phone_number_id,\n    message_id: v.messages[0].id,\n    telefono: telefono,\n    body: $json.body\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -944,
        -64
      ],
      "id": "994e690f-d9ff-4993-b905-16289ce99248",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "Eres un asistente que resume conversaciones de WhatsApp para CRM.\nDevuelve SOLO un JSON v√°lido con:\n{\n  \"resumen_historial\": string\n}\nReglas:\n- \"resumen_historial\": s√≠ntesis clara y fiel de TODO el historial (sin inventar).\n- No incluyas comentarios; solo JSON v√°lido.",
              "role": "system"
            },
            {
              "content": "=HISTORIAL COMPLETO:\n{{ $json.historial_conversacion || '' }}"
            }
          ]
        },
        "jsonOutput": true,
        "options": {
          "temperature": 0
        }
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        256,
        480
      ],
      "id": "c86ab1d5-4da7-4bf4-a8b9-c04db8adcf4f",
      "name": "OpenAI Summarize History",
      "credentials": {
        "openAiApi": {
          "id": "WhavwmgjOQKegim4",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "clashHandling": {
            "values": {
              "resolveClash": "preferInput1",
              "overrideEmpty": true
            }
          },
          "includeUnpaired": true
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1008,
        352
      ],
      "id": "db78a3e6-063d-4079-bea2-e2b65d7fa8ea",
      "name": "Merge1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2ea392d8-056e-48f8-ae01-4d9bd10de00a",
              "name": "resumen_historial",
              "value": "={{ $json.message?.content?.resumen_historial || $json.resumen_historial || '' }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        768,
        448
      ],
      "id": "c8ae9aaf-1a7b-4a3a-af77-bd8b2bb4c67f",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "81984b69-9b4d-4bf1-8e5e-9caaa32c34bf",
              "leftValue": "={{ $json.estado }}",
              "rightValue": "=en_conversacion",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1184,
        288
      ],
      "id": "7f8115f9-4bd9-4c3b-a652-03e14f01669a",
      "name": "IF - Conversacion Cerrada?"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://graph.facebook.com/v21.0/859011830622528/messages",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpCustomAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"messaging_product\": \"whatsapp\",\n  \"to\": \"{{ $json.vendor_phone }}\",\n  \"text\": {\n    \"body\": \"{{ $json.notification_message }}\"\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3248,
        -320
      ],
      "id": "47d2359b-67eb-40f9-b600-eb61bf2e50e2",
      "name": "WhatsApp - Send Vendor Notification",
      "credentials": {
        "httpCustomAuth": {
          "id": "vYJ67DysgTKJEf0q",
          "name": "WhatsApp Graph API (Custom - Business iterruptivo)"
        }
      }
    },
    {
      "parameters": {
        "jsCode": " // Obtener datos del lead desde Code2\n  const leadData = $node[\"Code2\"]?.json || {};\n\n  // Capturar estado SOLO si es la primera notificaci√≥n\n  const estado_al_notificar = leadData.notificacion_enviada === false\n    ? leadData.estado\n    : leadData.estado_al_notificar;\n\n  // Marcar como notificado\n  return [{\n    json: {\n      ...leadData,\n      notificacion_enviada: true,\n      estado_al_notificar: estado_al_notificar\n    }\n  }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2704,
        -16
      ],
      "id": "66b3634a-9c0f-49ed-8f96-f1a5d35a676b",
      "name": "Code - Get First Item"
    },
    {
      "parameters": {
        "jsCode": "// === 1) Lead desde el nodo \"IF - Conversacion Cerrada?\" ===\nconst leadItem = $items(\"IF - Conversacion Cerrada?\", 0, 0);\nconst leadData = leadItem?.json || {};\n\n// Obtener el estado desde Code2 (es la fuente m√°s confiable)\nconst estado = leadData.estado || $node[\"Code2\"]?.json?.estado || \"en_conversacion\";\n\n// === 2) Vendedores ===\nconst vendedores = $input.all();\n\n// === 3) Formatear estado y mensaje ===\nconst estadoUpper = estado.toUpperCase().replace(/_/g, \" \");\nconst mensaje = `Nuevo Lead Proyecto Trapiche - Estado: ${estadoUpper}`;\n\n// === 4) Crear items por vendedor ===\nreturn vendedores\n  .map(v => v?.json)\n  .filter(v => v && v.telefono)\n  .map(v => ({\n    json: {\n      vendor_phone: v.telefono,\n      vendor_name: v.nombre,\n      notification_message: mensaje,\n      ...leadData,\n    },\n  }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2752,
        -336
      ],
      "id": "a801598f-848d-41c3-a9b3-25d8379fe391",
      "name": "Code - Format Vendor Notifications"
    },
    {
      "parameters": {
        "batchSize": 10,
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        2960,
        -336
      ],
      "id": "dbbf2e61-a8dc-485b-b427-8baa6d132f37",
      "name": "Split In Batches - Vendors"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        3024,
        0
      ],
      "id": "f0f6650a-d30d-472f-8406-7c40bb15fc72",
      "name": "Wait",
      "webhookId": "41dbb475-8fe4-462f-ac42-e49e08f0d1b9"
    },
    {
      "parameters": {
        "url": "=https://qssefegfzxxurqbzndrs.supabase.co/rest/v1/leads?telefono=eq.{{ $node[\"Webhook: Recibir WhatsApp\"].json.body.entry[0].changes[0].value.messages[0].from }}&select=*",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFzc2VmZWdmenh4dXJxYnpuZHJzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAxMjA2MTEsImV4cCI6MjA3NTY5NjYxMX0.O6GW7ODPKK4asqDpsnA5Ejn11r_bz3Eklp5qk-1QOiQ"
            },
            {
              "name": "apikey",
              "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFzc2VmZWdmenh4dXJxYnpuZHJzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAxMjA2MTEsImV4cCI6MjA3NTY5NjYxMX0.O6GW7ODPKK4asqDpsnA5Ejn11r_bz3Eklp5qk-1QOiQ"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -48,
        -64
      ],
      "id": "7c83605b-b8d5-4320-9535-6724fe21883a",
      "name": "Supabase - Get Lead",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://qssefegfzxxurqbzndrs.supabase.co/rest/v1/leads",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFzc2VmZWdmenh4dXJxYnpuZHJzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAxMjA2MTEsImV4cCI6MjA3NTY5NjYxMX0.O6GW7ODPKK4asqDpsnA5Ejn11r_bz3Eklp5qk-1QOiQ"
            },
            {
              "name": "apikey",
              "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFzc2VmZWdmenh4dXJxYnpuZHJzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAxMjA2MTEsImV4cCI6MjA3NTY5NjYxMX0.O6GW7ODPKK4asqDpsnA5Ejn11r_bz3Eklp5qk-1QOiQ"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Prefer",
              "value": "resolution=merge-duplicates"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "telefono",
              "value": "={{ $json.telefono }}"
            },
            {
              "name": "nombre",
              "value": "={{ $json.nombre }}"
            },
            {
              "name": "rubro",
              "value": "={{ $json.rubro }}"
            },
            {
              "name": "horario_visita",
              "value": "={{ $json.horario_visita }}"
            },
            {
              "name": "horario_visita_timestamp",
              "value": "={{ $json.horario_visita_timestamp }}"
            },
            {
              "name": "estado",
              "value": "={{ $json.estado }}"
            },
            {
              "name": "historial_conversacion",
              "value": "={{ $json.historial_conversacion }}"
            },
            {
              "name": "historial_reciente",
              "value": "={{ $json.historial_reciente }}"
            },
            {
              "name": "resumen_historial",
              "value": "={{ $json.resumen_historial }}"
            },
            {
              "name": "ultimo_mensaje",
              "value": "={{ $json.ultimo_mensaje }}"
            },
            {
              "name": "intentos_bot",
              "value": "={{ $json.intentos_bot }}"
            },
            {
              "name": "fecha_captura",
              "value": "={{ $json.fecha_captura }}"
            },
            {
              "name": "notificacion_enviada",
              "value": "={{ $json.notificacion_enviada }}"
            },
            {
              "name": "estado_al_notificar",
              "value": "={{$json.estado_al_notificar}}"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2576,
        320
      ],
      "id": "777b467d-d3fb-4180-b320-b5df0f41ccec",
      "name": "Supabase - Upsert Lead"
    },
    {
      "parameters": {
        "url": "https://qssefegfzxxurqbzndrs.supabase.co/rest/v1/vendedores?activo=eq.true&select=*",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFzc2VmZWdmenh4dXJxYnpuZHJzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAxMjA2MTEsImV4cCI6MjA3NTY5NjYxMX0.O6GW7ODPKK4asqDpsnA5Ejn11r_bz3Eklp5qk-1QOiQ"
            },
            {
              "name": "apikey",
              "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFzc2VmZWdmenh4dXJxYnpuZHJzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAxMjA2MTEsImV4cCI6MjA3NTY5NjYxMX0.O6GW7ODPKK4asqDpsnA5Ejn11r_bz3Eklp5qk-1QOiQ"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2560,
        -336
      ],
      "id": "65aed409-47f6-43e2-86a5-86e9a6d4b279",
      "name": "Supabase - Get Vendedores"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "62b93104-2e80-460f-9646-337343ff3daa",
              "leftValue": "={{ !$json.notificacion_enviada }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2144,
        -112
      ],
      "id": "1abfda6d-9b21-4699-801e-4e7f24d8a1ca",
      "name": "If1"
    },
    {
      "parameters": {
        "url": "=https://qssefegfzxxurqbzndrs.supabase.co/rest/v1/leads?telefono=eq.{{ $json.telefono }}&select=*",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFzc2VmZWdmenh4dXJxYnpuZHJzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAxMjA2MTEsImV4cCI6MjA3NTY5NjYxMX0.O6GW7ODPKK4asqDpsnA5Ejn11r_bz3Eklp5qk-1QOiQ"
            },
            {
              "name": "apikey",
              "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFzc2VmZWdmenh4dXJxYnpuZHJzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAxMjA2MTEsImV4cCI6MjA3NTY5NjYxMX0.O6GW7ODPKK4asqDpsnA5Ejn11r_bz3Eklp5qk-1QOiQ"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1472,
        144
      ],
      "id": "bef5797a-3084-4fd9-8f5f-3d6fb900ccb2",
      "name": "Supabase - Get Lead1",
      "credentials": {
        "httpHeaderAuth": {
          "id": "5pHMC1T78XfLbQ81",
          "name": "Supabase API Key"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook: Recibir WhatsApp": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code - Extract Audio Info",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model": {
      "main": [
        [
          {
            "node": "OpenAI - Extract Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "OpenAI Summarize History",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - Extract Audio Info": {
      "main": [
        [
          {
            "node": "HTTP Request - Get Audio URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request - Get Audio URL": {
      "main": [
        [
          {
            "node": "HTTP Request - Download Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request - Download Audio": {
      "main": [
        [
          {
            "node": "OpenAI - Whisper Transcribe",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI - Whisper Transcribe": {
      "main": [
        [
          {
            "node": "Code - Format Transcription",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - Format Transcription": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI - Extract Data": {
      "main": [
        [
          {
            "node": "Parse Horario to Timestamp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Horario to Timestamp": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request (GitHub)": {
      "main": [
        [
          {
            "node": "Supabase - Get Lead",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request - Mark Message as Read": {
      "main": [
        [
          {
            "node": "HTTP Request (GitHub)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "HTTP Request - Mark Message as Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Summarize History": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "IF - Conversacion Cerrada?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "IF - Conversacion Cerrada?": {
      "main": [
        [
          {
            "node": "Supabase - Get Lead1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Supabase - Upsert Lead",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WhatsApp - Send Vendor Notification": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - Get First Item": {
      "main": [
        [
          {
            "node": "Supabase - Upsert Lead",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - Format Vendor Notifications": {
      "main": [
        [
          {
            "node": "Split In Batches - Vendors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split In Batches - Vendors": {
      "main": [
        [
          {
            "node": "Code - Get First Item",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "WhatsApp - Send Vendor Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Split In Batches - Vendors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase - Get Lead": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase - Upsert Lead": {
      "main": [
        [
          {
            "node": "Send message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase - Get Vendedores": {
      "main": [
        [
          {
            "node": "Code - Format Vendor Notifications",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Supabase - Get Vendedores",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Supabase - Upsert Lead",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase - Get Lead1": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [],
        []
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "93301220-c32d-4874-bb53-5d9bd424d32d",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ac495b013a9dddb9724430276f2a1ebc03086cb4690790d0c3f0b57736633d28"
  },
  "id": "dneNgFYdWfFPDOzH",
  "tags": [
    {
      "createdAt": "2025-10-05T15:49:21.676Z",
      "updatedAt": "2025-10-05T15:49:21.676Z",
      "id": "kW6ZhQEWOP50a5HL",
      "name": "IA Agent Bot"
    }
  ]
}
